name: Reddit Digest

on:
  schedule:
    # Run daily at 16:00 UTC (18:00 CEST)
    - cron: '0 16 * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  run-digest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Verify Environment Variables
      run: |
        if [ -n "$EMAIL_SENDER" ]; then
          echo "EMAIL_SENDER is set"
        else
          echo "EMAIL_SENDER is not set"
        fi
        if [ -n "$EMAIL_RECIPIENT" ]; then
          echo "EMAIL_RECIPIENT is set"
        else
          echo "EMAIL_RECIPIENT is not set"
        fi
        if [ -n "$EMAIL_PASSWORD" ]; then
          echo "EMAIL_PASSWORD is set"
        else
          echo "EMAIL_PASSWORD is not set"
        fi
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        USER_TIMEZONE: 'Europe/Berlin'
        
    - name: Verify environment setup
      run: |
        echo "Checking environment variables..."
        if [ -n "$REDDIT_CLIENT_SECRET" ]; then
          echo "REDDIT_CLIENT_SECRET is set"
        else
          echo "REDDIT_CLIENT_SECRET is not set"
        fi
        if [ -n "$EMAIL_PASSWORD" ]; then
          echo "EMAIL_PASSWORD is set"
        else
          echo "EMAIL_PASSWORD is not set"
        fi
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "OPENAI_API_KEY is set"
        else
          echo "OPENAI_API_KEY is not set"
        fi
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        USER_TIMEZONE: 'Europe/Berlin'
        
    - name: Pre-check Reddit API
      run: |
        python -c "import praw; import os; print('Checking Reddit API access...'); reddit = praw.Reddit(client_id=os.environ.get('REDDIT_CLIENT_ID'), client_secret=os.environ.get('REDDIT_CLIENT_SECRET'), user_agent='pre-check script'); subreddit = reddit.subreddit('cursor'); print(f'Found {len(list(subreddit.hot(limit=3)))} posts in r/cursor'); subreddit = reddit.subreddit('windsurf'); print(f'Found {len(list(subreddit.hot(limit=3)))} posts in r/windsurf'); subreddit = reddit.subreddit('vibecoding'); print(f'Found {len(list(subreddit.hot(limit=3)))} posts in r/vibecoding')"
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}

    - name: Generate test file to confirm subreddit coverage
      run: |
        echo "Testing subreddit availability:" > subreddit_test.log
        python -c "import praw; import os; reddit = praw.Reddit(client_id=os.environ.get('REDDIT_CLIENT_ID'), client_secret=os.environ.get('REDDIT_CLIENT_SECRET'), user_agent='script:reddit-digest-test:v1.0'); cursor = list(reddit.subreddit('cursor').hot(limit=1)); windsurf = list(reddit.subreddit('windsurf').hot(limit=1)); vibecoding = list(reddit.subreddit('vibecoding').hot(limit=1)); print(f'Found {len(cursor)} posts from cursor, {len(windsurf)} posts from windsurf, and {len(vibecoding)} posts from vibecoding', file=open('subreddit_test.log', 'a'))" || echo "Error testing subreddits" >> subreddit_test.log
        cat subreddit_test.log
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        
    - name: Run email script
      run: python src/reddit_email.py --run-once
      env:
        # These env vars are already set at the job level but specified here for completeness
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: "GitHub Actions: Reddit Digest Bot"
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        USER_TIMEZONE: 'Europe/Berlin'
        SMTP_SERVER: 'smtp.gmail.com'
        SMTP_PORT: '587'
        
    - name: Check output files
      if: always()
      run: |
        echo "=== Email HTML Content Length ==="
        if [ -f "last_email_content.html" ]; then
          wc -l last_email_content.html
          grep -i "windsurf" last_email_content.html | wc -l
          echo "Sample of HTML content:"
          head -n 20 last_email_content.html
        else
          echo "No HTML content generated"
        fi
        
        echo "\n=== Subreddit Data ==="
        if [ -f "subreddit_data.txt" ]; then
          cat subreddit_data.txt
        else
          echo "No subreddit data file found"
        fi

